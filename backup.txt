


#include <GL/glew.h>
#include <GLFW/glfw3.h>

#include <iostream>
#include <string>

#include <fstream>
#include <sstream>
struct ShaderType
{
public:
    std::string vertex;
    std::string fragment;
};

static ShaderType shader_source(const std::string& file)
{
    std::ifstream ifs1(file);

    enum enu
    {
        none = -1, vertex, fragment
    };

    std::stringstream ss[2];
    enu type = enu::none;
    std::string str1;
    while (getline(ifs1, str1))
    {
        if (str1.find("#shader") != std::string::npos)
        {
            if (str1.find("vertex") != std::string::npos)
                type = enu::vertex;
            else if (str1.find("fragment") != std::string::npos)
                type = enu::fragment;
        }
        else
        {
            ss[(int)type] << str1 << "\n";
        }
    }

    return { ss[0].str(), ss[1].str() };
}

static unsigned int compile_shader(const std::string source, unsigned int type)
{
    unsigned int id = glCreateShader(type);
    const char* src = source.c_str();
    glShaderSource(id, 1, &src, nullptr);          //设置着色器源代码
    glCompileShader(id);                            //编译着色器

    int result;
    glGetShaderiv(id, GL_COMPILE_STATUS, &result);
    if (!result)
    {
        int length;
        glGetShaderiv(id, GL_INFO_LOG_LENGTH, &length);
        char* message = (char*)alloca(length * sizeof(char));
        glGetShaderInfoLog(id, length, &length, message);

        std::cout << "failed!" << 
            (type==GL_VERTEX_SHADER ? "vertex" : "fragment") << std::endl;

        glDeleteShader(id);

        return 0;
    }

    return id;
}


static unsigned int create_shader(const std::string vertexShader, const std::string fragmentShader)
{
    unsigned int pgm = glCreateProgram();           //创建程序对象
    unsigned int vs = compile_shader(vertexShader, GL_VERTEX_SHADER);
    unsigned int fs = compile_shader(fragmentShader, GL_FRAGMENT_SHADER);

    glAttachShader(pgm, vs);                    //将着色器附加到程序对象
    glAttachShader(pgm, fs);

    glLinkProgram(pgm);                             //链接程序对象
    glValidateProgram(pgm);                         //验证程序对象

    glDeleteShader(vs);
    glDeleteShader(fs);

    return pgm;
}


int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    if (glewInit() != GLEW_OK)
        std::cout << "glewinit error!" << std::endl;

    float position[] = {
        0.5f, 0.5f,
        0.5f, -0.5f,
        -0.5f, -0.5f,
        -0.5f, 0.5f
    };

    unsigned int indices[] = {
        0, 1, 2,
        0, 2, 3
    };

    unsigned int buffer;
    glGenBuffers(1, &buffer);
    glBindBuffer(GL_ARRAY_BUFFER, buffer);
    glBufferData(GL_ARRAY_BUFFER, 8 * sizeof(float), position, GL_STATIC_DRAW);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), 0);

    unsigned int ibo;
    glGenBuffers(1, &ibo);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(unsigned int), indices, GL_STATIC_DRAW);

    ShaderType source = shader_source("Res/shaders/basic.sha");
    std::cout << "VERTEX" << std::endl;
    std::cout << source.vertex << std::endl;
    std::cout << "FRAGMENT" << std::endl;
    std::cout << source.fragment << std::endl;

    unsigned int shader = create_shader(source.vertex, source.fragment);
    glUseProgram(shader);

    int loc = glGetUniformLocation(shader, "u_color");
    glUniform4f(loc, 0.0f, 0.5f, 0.5f, 1.f);

    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        /* Render here */
        glClear(GL_COLOR_BUFFER_BIT);

        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr);

        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}



// 23.1.31 =====================================================

#include "GL/glew.h"
#include <GLFW/glfw3.h>

#include "iostream"
#include "fstream"
#include "sstream"
#include "string"

#include "Renderer.h"
#include "VertexBuffer.h"
#include "IndexBuffer.h"
#include "VertexArray.h"

struct ShaderProgramSource
{
    std::string VertexSource;
    std::string FragmentSource;
};

static ShaderProgramSource ParseShader(const std::string& filepath)
{
    std::ifstream stream(filepath);

    enum shaderType
    {
        NONE = -1, VERTEX, FRAGMENT
    };

    std::stringstream ss[2];
    shaderType type = shaderType::NONE;
    std::string line;
    while (getline(stream, line))
    {
        if (line.find("#shader") != std::string::npos)
        {
            if (line.find("vertex") != std::string::npos)
                type = shaderType::VERTEX;
            else if (line.find("fragment") != std::string::npos)
                type = shaderType::FRAGMENT;
        }
        else
        {
            ss[(int)type] << line << '\n';
        }
    }

    return { ss[0].str(), ss[1].str() };
}


static unsigned CompileShader(const std::string& source, unsigned int type)
{
    unsigned int id = glCreateShader(type);
    const char* src = source.c_str();
    //const char* src = &source[0];
    glShaderSource(id, 1, &src, nullptr);       //设置着色器源代码
    glCompileShader(id);                         //编译着色器

    int result;
    glGetShaderiv(id, GL_COMPILE_STATUS, &result);

    if (result == GL_FALSE)
    {
        int length;
        glGetShaderiv(id, GL_INFO_LOG_LENGTH, &length);
        char* message = (char*)alloca(length * sizeof(char));
        //char* message = new [length * char];
        glGetShaderInfoLog(id, length, &length, message);

        std::cout << "failed!" << (type == GL_VERTEX_SHADER ? "vertex" : "fragment") << std::endl;
        std::cout << message << std::endl;

        glDeleteShader(id);

        return 0;
    }

    return id;
}

static unsigned int CreateShader(const std::string& vertexShader, const std::string& fragmentShader)
{
    unsigned int program = glCreateProgram();       //创建程序对象
    unsigned int vertex = CompileShader(vertexShader, GL_VERTEX_SHADER);
    unsigned int fragment = CompileShader(fragmentShader, GL_FRAGMENT_SHADER);

    glAttachShader(program, vertex);                //将着色器附加到程序对象
    glAttachShader(program, fragment);
    glLinkProgram(program);                         //链接程序对象
    glValidateProgram(program);                     //验证程序对象       
   
    glDeleteShader(vertex);
    glDeleteShader(fragment);

    return program;
}

int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    glfwSwapInterval(1);    //每帧刷新一次

    if (glewInit() != GLEW_OK)
    {
        std::cout << "error!" << std::endl;
    }
    std::cout << glGetString(GL_VERSION) << std::endl;

    float position[] = {           //顶点数据
        -0.5f, -0.5f, // 0
        0.5f, -0.5f,  // 1
        0.5f, 0.5f,   // 2
        -0.5f, 0.5f,  // 3
    };

    unsigned int indices[] = {
        0, 1, 2,
        2, 3, 0
    };

    unsigned int vao;       //顶点数组对象id
    glGenVertexArrays(1, &vao);     //生成
    glBindVertexArray(vao);     //绑定

    VertexArray va;
    VertexBuffer vb(position, 4 * 2 * sizeof(float));
    VertexBufferLayout layout;
    layout.Push<float>(2);
    va.AddBuffer(vb, layout);

    //VertexBuffer v1(position, 10 * sizeof(float));           //缓冲区对象id
    
    IndexBuffer ib(indices, 6);

    ShaderProgramSource source = ParseShader("Res/shaders/basic.sha");      //文件中搜索源码
    unsigned int shader = CreateShader(source.VertexSource, source.FragmentSource);
    glUseProgram(shader);       //绑定着色器程序

    int location = glGetUniformLocation(shader, "u_color");
    ASSERT(location != -1);
    glUniform4f(location, 0.0f, 1.0f, 0.5f, 1.0f);

    GLCALL(glBindVertexArray(0));
    GLCALL(glUseProgram(0));
    GLCALL(glBindBuffer(GL_ARRAY_BUFFER, 0));
    GLCALL(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0))

    float var = 0.01f;
    float vec1 = 0.5f;

    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        /* Render here */
        glClear(GL_COLOR_BUFFER_BIT);

        GLCALL(glUseProgram(shader));
        GLCALL(glUniform4f(location, 0.5f, vec1, 0.5f, 1.0f))
        va.Bind();
        ib.Bind();

        GLCALL(glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr));

        if (vec1 >= 1.0)
            var = -0.01f;
        else if (vec1 <= 0)
            var = 0.01f;
        vec1 += var;

        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    glDeleteProgram(shader);

    glfwTerminate();
    return 0;
}